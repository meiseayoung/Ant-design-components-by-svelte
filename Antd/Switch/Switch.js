/* Switch.html generated by Svelte v1.49.1 */
var Switch = (function() { "use strict";

	function checkeStatus(checked) {
    return checked === true ? 'ant-switch-checked' : '';
}

	function checkedText(checked,customText) {
    return checked === true ? customText.on : customText.off;
}

	function disabledClass(disabled) {
    return disabled === true ? 'ant-switch-disabled' : '';
}

	function data(){
    return {
        disabled:false,
        checked:true,
        customText:{
            on:'开',
            off:'关'
        }
    }
};

	function oncreate(){
    this.refs.switch.addEventListener("click",event=>{
        if(this.get("disabled")){
            return;
        }
        let checked = this.get("checked");
        this.set({
            checked:!checked
        });
    })
};

	function create_main_fragment(state, component) {
		var text, span, span_1, text_1, span_class_value;

		return {
			c: function create() {
				text = createText("﻿");
				span = createElement("span");
				span_1 = createElement("span");
				text_1 = createText(state.checkedText);
				this.h();
			},

			h: function hydrate() {
				span_1.className = "ant-switch-inner";
				span.className = span_class_value = "ant-switch " + state.disabledClass + " " + state.checkeStatus;
				span.tabIndex = "0";
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
				insertNode(span, target, anchor);
				appendNode(span_1, span);
				appendNode(text_1, span_1);
				component.refs.switch = span;
			},

			p: function update(changed, state) {
				if (changed.checkedText) {
					text_1.data = state.checkedText;
				}

				if ((changed.disabledClass || changed.checkeStatus) && span_class_value !== (span_class_value = "ant-switch " + state.disabledClass + " " + state.checkeStatus)) {
					span.className = span_class_value;
				}
			},

			u: function unmount() {
				detachNode(text);
				detachNode(span);
			},

			d: function destroy() {
				if (component.refs.switch === span) component.refs.switch = null;
			}
		};
	}

	function Switch(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		this._recompute({ checked: 1, customText: 1, disabled: 1 }, this._state);

		var _oncreate = oncreate.bind(this);

		if (!options.root) {
			this._oncreate = [_oncreate];
		} else {
		 	this.root._oncreate.push(_oncreate);
		 }

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);

			callAll(this._oncreate);
		}
	}

	assign(Switch.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Switch.prototype._recompute = function _recompute(changed, state) {
		if (changed.checked) {
			if (differs(state.checkeStatus, (state.checkeStatus = checkeStatus(state.checked)))) changed.checkeStatus = true;
		}

		if (changed.checked || changed.customText) {
			if (differs(state.checkedText, (state.checkedText = checkedText(state.checked, state.customText)))) changed.checkedText = true;
		}

		if (changed.disabled) {
			if (differs(state.disabledClass, (state.disabledClass = disabledClass(state.disabled)))) changed.disabledClass = true;
		}
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function noop() {}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Switch;
}());